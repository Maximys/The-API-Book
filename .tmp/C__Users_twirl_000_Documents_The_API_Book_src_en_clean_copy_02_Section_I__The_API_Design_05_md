{"data":{"counter":12,"refCounter":0,"stat":{"words":20632,"characters":96651},"l10n":{"title":"The API","author":"Sergey Konstantinov","chapter":"Chapter","toc":"Table of Contents","description":"Designing APIs is a very special skill: API is a multiplier to both your opportunities and mistakes. This book is written to share the expertise and describe the best practices in designing and developing APIs. In Section I, we'll discuss the API architecture as a concept: how to build the hierarchy properly, from high-level planning down to final interfaces. Section II is dedicated to expanding existing APIs in a backwards-compatible manner. Finally, in Section III we will talk about the API as a product.","locale":"en_US","file":"API","aboutMe":{"title":"About the Author","content":["<p>Sergey Konstantinov has been working with APIs for more than a decade. He started his career as a software engineer in the Maps API division at Yandex and eventually became the head of the service, being responsible for both technical architecture and product management.</p>","<p>During this tenure, Sergey got a unique experience in building world-class APIs with a daily audience of tens of millions, planning roadmaps for such a service, and giving numerous public speeches. He also worked for a year and a half as a member of the W3C Technical Architecture Group.</p>","<p>After nine years in Maps, Sergey switched to technical-lead roles in other departments and companies, leading integration efforts and being responsible for the technical architecture of entire business units. Today, Sergey lives in Tallinn, Estonia, and works as a staff software engineer at Bolt.</p>"],"imageCredit":"Photo by <a href=\"http://linkedin.com/in/zloylos/\">Denis Hananein</a>"},"landingFile":"index.html","url":"https://twirl.github.io/The-API-Book/","favicon":"/img/favicon.png","sidePanel":{"shareTo":"Share","copyLink":"Link","shareParameters":{"url":"https://twirl.github.io/The-API-Book/","text":"The API by Sergey Konstantinov — a book about designing APIs, extending them and finding a proper place in the market","tags":"API,TheAPIBook","viaTwitter":"blogovodoved"},"services":[{"key":"facebook","link":"https://www.facebook.com/sharer.php?u=${url}"},{"key":"twitter","link":"https://twitter.com/intent/tweet?text=${text}&url=${url}&hashtags=${tags}&via=${viaTwitter}"},{"key":"linkedin","link":"https://www.linkedin.com/sharing/share-offsite/?url=${url}"},{"key":"reddit","link":"http://www.reddit.com/submit?url=${url}&title=${text}"}]},"imageCredit":"Image Credit","links":{"email":"yatwirl@gmail.com","emailString":"yatwirl@gmail.com","linkedinHref":"https://www.linkedin.com/in/twirl/","linkedinString":"linkedin.com/in/twirl","patreonHref":"https://www.patreon.com/yatwirl","patreonString":"patreon.com/yatwirl","patreonTag":"Patreon","githubHref":"https://github.com/twirl/The-API-Book","githubString":"github.com/twirl/The-API-Book","twitterHref":"https://twitter.com/blogovodoved","kindleHref":"https://www.amazon.com/gp/product/B09RHH44S5/ref=dbs_a_def_rwt_hsch_vapi_tkin_p1_i0","kindleTag":"buy Kindle version","mediumHref":"https://twirl.medium.com/","mediumTag":"Medium"},"sourceCodeAt":"Source code available at","frontPage":{"title":"The API","pageTitle":"Front Page","contents":["<p>The API-first development is one of the hottest technical topics nowadays, since many companies started to realize that API serves as a multiplicator to their opportunities—but it also amplifies the design mistakes as well.</p>","<p>This book is written to share the expertise and describe the best practices in designing and developing APIs. In Section I, we'll discuss the API architecture as a concept: how to build the hierarchy properly, from high-level planning down to final interfaces. Section II is dedicated to expanding existing APIs in a backwards-compatible manner. Finally, in Section III we will talk about the API as a product.</p>","<p class=\"text-align-left\">Illustrations &amp; inspiration by Maria Konstantinova &middot; <a href=\"https://www.instagram.com/art.mari.ka/\">art.mari.ka</a></p>","<img class=\"cc-by-nc-img\" alt=\"Creative Commons «Attribution-NonCommercial» Logo\" src=\"https://i.creativecommons.org/l/by-nc/4.0/88x31.png\"/>","<p class=\"cc-by-nc\">This book is distributed under the <a href=\"http://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-NonCommercial 4.0 International licence</a>.</p>"]},"landing":{"subTitle":"Free e-book","subscribeOn":"Subscribe for updates on","updates":["github"],"followOn":"Follow me on","follow":["linkedin","twitter","medium"],"supportThisWork":"Support this work on","support":["patreon","kindle"],"content":["<p>The API-first development is one of the hottest technical topics nowadays, since many companies started to realize that API serves as a multiplicator to their opportunities—but it also amplifies the design mistakes as well.</p>","<p>This book is written to share the expertise and describe the best practices in designing and developing APIs. In Section I, we'll discuss the API architecture as a concept: how to build the hierarchy properly, from high-level planning down to final interfaces. Section II is dedicated to expanding existing APIs in a backwards-compatible manner. Finally, in Section III we will talk about the API as a product.</p>","<p>Illustration &amp; inspiration: <a href=\"https://www.instagram.com/art.mari.ka/\">art.mari.ka</a>.</p>"],"download":"You might download ‘The API’ in","or":"or","readOnline":"read it online","license":"This book is distributed under the <a href=\"http://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-NonCommercial 4.0 International licence</a>.","footer":["<p>Книгу «API» можно <a href=\"index.ru.html\">читать по-русски</a>.</p>"]}},"base":"C:\\Users\\twirl_000\\Documents\\The-API-Book\\src","templates":{"pageBreak":"<div class=\"page-break\"></div>"},"anchor":"chapter-11","titleParts":["Describing Final Interfaces"],"localContext":null,"references":[],"title":"Chapter 11. Describing Final Interfaces"},"messages":[],"history":[],"cwd":"C:\\Users\\twirl_000\\Documents\\The-API-Book","value":"\n<p>When all entities, their responsibilities, and their relations to each other are defined, we proceed to the development of the API itself. We are to describe the objects, fields, methods, and functions nomenclature in detail. In this chapter, we're giving purely practical advice on making APIs usable and understandable.</p>\n<p>An important assertion at number 0:</p>\n<h5><a href=\"#chapter-11-paragraph-0\" id=\"chapter-11-paragraph-0\" class=\"anchor\">0. Rules must not be applied unthinkingly</a></h5>\n<p>Rules are just simply formulated generalizations from one's experience. They are not to be applied unconditionally, and they don't make thinking redundant. Every rule has a rational reason to exist. If your situation doesn't justify following the rule — then you shouldn't do it.</p>\n<p>For example, demanding a specification be consistent exists to help developers spare time on reading docs. If you <em>need</em> developers to read some entity's doc, it is totally rational to make its signature deliberately inconsistent.</p>\n<p>This idea applies to every concept listed below. If you get an unusable, bulky, unobvious API because you follow the rules, it's a motive to revise the rules (or the API).</p>\n<p>It is important to understand that you always can introduce concepts of your own. For example, some frameworks willfully reject paired <code>set_entity</code> / <code>get_entity</code> methods in a favor of a single <code>entity()</code> method, with an optional argument. The crucial part is being systematic in applying the concept. If it's rendered into life, you must apply it to every single API method, or at the very least elaborate a naming rule to discern such polymorphic methods from regular ones.</p>\n<h4>Ensuring readability and consistency</h4>\n<p>The most important task for the API vendor is to make code written by third-party developers atop of the API easily readable and maintainable. Remember that the law of large numbers works against you: if some concept or a signature might be treated wrong, they will be inevitably treated wrong by a number of partners, and this number will be increasing with the API popularity growth.</p>\n<h5><a href=\"#chapter-11-paragraph-1\" id=\"chapter-11-paragraph-1\" class=\"anchor\">1. Explicit is always better than implicit</a></h5>\n<p>Entity name must explicitly tell what it does and what side effects to expect while using it.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Cancels an order\r\norder.canceled = true;\n</code></pre>\n<p>It's unobvious that a state field might be set, and that this operation will cancel the order.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>// Cancels an order\r\norder.cancel();\n</code></pre>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns aggregated statistics\r\n// since the beginning of time\r\norders.getStats()\n</code></pre>\n<p>Even if the operation is non-modifying but computationally expensive, you should explicitly indicate that, especially if clients got charged for computational resource usage. Even more so, default values must not be set in a manner leading to maximum resource consumption.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>// Calculates and returns\r\n// aggregated statistics\r\n// for a specified period of time\r\norders.calculateAggregatedStats({\r\n  begin_date,\r\n  end_date\r\n});\n</code></pre>\n<p><strong>Try to design function signatures to be absolutely transparent about what the function does, what arguments it takes, and what's the result</strong>. While reading a code working with your API, it must be easy to understand what it does without reading docs.</p>\n<p>Two important implications:</p>\n<p><strong>1.1.</strong> If the operation is modifying, it must be obvious from the signature. In particular, there might be no modifying operations using the <code>GET</code> verb.</p>\n<p><strong>1.2.</strong> If your API's nomenclature contains both synchronous and asynchronous operations, then (a)synchronicity must be apparent from signatures, <strong>or</strong> a naming convention must exist.</p>\n<h5><a href=\"#chapter-11-paragraph-2\" id=\"chapter-11-paragraph-2\" class=\"anchor\">2. Specify which standards are used</a></h5>\n<p>Regretfully, humanity is unable to agree on the most trivial things, like which day starts the week, to say nothing about more sophisticated standards.</p>\n<p>So <em>always</em> specify exactly which standard is applied. Exceptions are possible if you're 100% sure that only one standard for this entity exists in the world, and every person on Earth is totally aware of it.</p>\n<p><strong>Bad</strong>: <code>\"date\": \"11/12/2020\"</code> — there are tons of date formatting standards; you can't even tell which number means the day number and which number means the month.</p>\n<p><strong>Better</strong>: <code>\"iso_date\": \"2020-11-12\"</code>.</p>\n<p><strong>Bad</strong>: <code>\"duration\": 5000</code> — five thousand of what?</p>\n<p><strong>Better</strong>:<br>\n<code>\"duration_ms\": 5000</code><br>\nor<br>\n<code>\"duration\": \"5000ms\"</code><br>\nor<br>\n<code>\"iso_duration\": \"PT5S\"</code><br>\nor<br>\n<code>\"duration\": {\"unit\": \"ms\", \"value\": 5000}</code>.</p>\n<p>One particular implication of this rule is that money sums must <em>always</em> be accompanied by a currency code.</p>\n<p>It is also worth saying that in some areas the situation with standards is so spoiled that, whatever you do, someone got upset. A ‘classical’ example is geographical coordinates order (latitude-longitude vs longitude-latitude). Alas, the only working method of fighting frustration there is the ‘Serenity Notepad’ to be discussed in Section II.</p>\n<h5><a href=\"#chapter-11-paragraph-3\" id=\"chapter-11-paragraph-3\" class=\"anchor\">3. Entities must have concrete names</a></h5>\n<p>Avoid single amoeba-like words, such as ‘get’, ‘apply’, ‘make’, etc.</p>\n<p><strong>Bad</strong>: <code>user.get()</code> — hard to guess what is actually returned.</p>\n<p><strong>Better</strong>: <code>user.get_id()</code>.</p>\n<h5><a href=\"#chapter-11-paragraph-4\" id=\"chapter-11-paragraph-4\" class=\"anchor\">4. Don't spare the letters</a></h5>\n<p>In the 21st century, there's no need to shorten entities' names.</p>\n<p><strong>Bad</strong>: <code>order.time()</code> — unclear, what time is actually returned: order creation time, order preparation time, order waiting time?…</p>\n<p><strong>Better</strong>: <code>order.get_estimated_delivery_time()</code></p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns a pointer to the first occurrence\r\n// in str1 of any of the characters\r\n// that are part of str2\r\nstrpbrk (str1, str2)\n</code></pre>\n<p>Possibly, an author of this API thought that the <code>pbrk</code> abbreviature would mean something to readers; clearly mistaken. Also, it's hard to tell from the signature which string (<code>str1</code> or <code>str2</code>) stands for a character set.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>str_search_for_characters(\r\n  str,\r\n  lookup_character_set\r\n)\n</code></pre>\n<p>— though it's highly disputable whether this function should exist at all; a feature-rich search function would be much more convenient. Also, shortening a <code>string</code> to an <code>str</code> bears no practical sense, regretfully being a routine in many subject areas.</p>\n<p><strong>NB</strong>: sometimes field names are shortened or even omitted (e.g., a heterogenous array is passed instead of a set of named fields) to lessen the amount of traffic. In most cases, this is absolutely meaningless as usually the data is compressed at the protocol level.</p>\n<h5><a href=\"#chapter-11-paragraph-5\" id=\"chapter-11-paragraph-5\" class=\"anchor\">5. Naming implies typing</a></h5>\n<p>Field named <code>recipe</code> must be of a <code>Recipe</code> type. Field named <code>recipe_id</code> must contain a recipe identifier that we could find within the <code>Recipe</code> entity.</p>\n<p>Same for primitive types. Arrays must be named in a plural form or as collective nouns, i.e. <code>objects</code>, <code>children</code>. If that's impossible, better add a prefix or a postfix to avoid doubt.</p>\n<p><strong>Bad</strong>: <code>GET /news</code> — unclear whether a specific news item is returned, or a list of them.</p>\n<p><strong>Better</strong>: <code>GET /news-list</code>.</p>\n<p>Similarly, if a Boolean value is expected, entity naming must describe some qualitative state, i.e. <code>is_ready</code>, <code>open_now</code>.</p>\n<p><strong>Bad</strong>: <code>\"task.status\": true</code><br>\n— statuses are not explicitly binary; also such API isn't extendable.</p>\n<p><strong>Better</strong>: <code>\"task.is_finished\": true</code>.</p>\n<p>Specific platforms imply specific additions to this rule with regard to the first-class citizen types they provide. For example, JSON doesn't have a <code>Date</code> object type, so the dates are to be passed as numbers or strings. In this case, it's convenient to mark dates somehow, for example, by adding <code>_at</code> or <code>_date</code> postfixes, i.e. <code>created_at</code>, <code>occurred_at</code>.</p>\n<p>If an entity name is a polysemantic term itself, which could confuse developers, better add an extra prefix or postfix to avoid misunderstanding.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns a list of \r\n// coffee machine builtin functions\r\nGET /coffee-machines/{id}/functions\n</code></pre>\n<p>Word ‘function’ is many-valued. It could mean built-in functions, but also ‘a piece of code’, or a state (machine is functioning).</p>\n<p><strong>Better</strong>: <code>GET /v1/coffee-machines/{id}/builtin-functions-list</code></p>\n<h5><a href=\"#chapter-11-paragraph-6\" id=\"chapter-11-paragraph-6\" class=\"anchor\">6. Matching entities must have matching names and behave alike</a></h5>\n<p><strong>Bad</strong>: <code>begin_transition</code> / <code>stop_transition</code><br>\n— <code>begin</code> and <code>stop</code> terms don't match; developers will have to dig into the docs.</p>\n<p><strong>Better</strong>: either <code>begin_transition</code> / <code>end_transition</code> or <code>start_transition</code> / <code>stop_transition</code>.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Find the position of the first occurrence\r\n// of a substring in a string\r\nstrpos(haystack, needle)\n</code></pre>\n<pre><code>// Replace all occurrences\r\n// of the search string \r\n// with the replacement string\r\nstr_replace(needle, replace, haystack)\n</code></pre>\n<p>Several rules are violated:</p>\n<ul>\n<li>inconsistent underscore using;</li>\n<li>functionally close methods have different <code>needle</code>/<code>haystack</code> argument ordering;</li>\n<li>the first function finds the first occurrence while the second one finds them all, and there is no way to deduce that fact out of the function signatures.</li>\n</ul>\n<p>We're leaving the exercise of making these signatures better to the reader.</p>\n<h5><a href=\"#chapter-11-paragraph-7\" id=\"chapter-11-paragraph-7\" class=\"anchor\">7. Avoid double negations</a></h5>\n<p><strong>Bad</strong>: <code>\"dont_call_me\": false</code><br>\n— humans are bad at perceiving double negation; make mistakes.</p>\n<p><strong>Better</strong>: <code>\"prohibit_calling\": true</code> or <code>\"avoid_calling\": true</code><br>\n— it's easier to read, though you shouldn't deceive yourself. Avoid semantical double negations, even if you've found a ‘negative’ word without a ‘negative’ prefix.</p>\n<p>Also worth mentioning is that making mistakes in the <a href=\"https://en.wikipedia.org/wiki/De_Morgan&#x27;s_laws\">de Morgan's laws</a> usage is even simpler. For example, if you have two flags:</p>\n<pre><code>GET /coffee-machines/{id}/stocks\r\n→\r\n{\r\n  \"has_beans\": true,\r\n  \"has_cup\": true\r\n}\n</code></pre>\n<p>‘Coffee might be prepared’ condition would look like <code>has_beans &#x26;&#x26; has_cup</code> — both flags must be true. However, if you provide the negations of both flags:</p>\n<pre><code>{\r\n  \"beans_absence\": false,\r\n  \"cup_absence\": false\r\n}\n</code></pre>\n<p>— then developers will have to evaluate the flag <code>!beans_absence &#x26;&#x26; !cup_absence</code> which is equivalent to <code>!(beans_absence || cup_absence)</code> conditions, and in this transition, people tend to make mistakes. Avoiding double negations helps little, and regretfully only general advice could be given: avoid the situations when developers have to evaluate such flags.</p>\n<h5><a href=\"#chapter-11-paragraph-8\" id=\"chapter-11-paragraph-8\" class=\"anchor\">8. Avoid implicit type conversion</a></h5>\n<p>This advice is opposite to the previous one, ironically. When developing APIs you frequently need to add a new optional field with a non-empty default value. For example:</p>\n<pre><code>const orderParams = {\r\n  contactless_delivery: false\r\n};\r\nconst order = api.createOrder(\r\n  orderParams\r\n);\n</code></pre>\n<p>This new <code>contactless_delivery</code> option isn't required, but its default value is <code>true</code>. A question arises: how developers should discern explicit intention to abolish the option (<code>false</code>) from knowing not it exists (the field isn't set). They have to write something like:</p>\n<pre><code>if (\r\n  Type(\r\n    orderParams.contactless_delivery\r\n  ) == 'Boolean' &#x26;&#x26; \r\n  orderParams\r\n    .contactless_delivery == false) { \r\n  … \r\n}\n</code></pre>\n<p>This practice makes the code more complicated, and it's quite easy to make mistakes, which will effectively treat the field in an opposite manner. The same could happen if some special values (i.e. <code>null</code> or <code>-1</code>) to denote value absence are used.</p>\n<p><strong>NB</strong>: this observation is not valid if both the platform and the protocol unambiguously support special tokens to reset a field to its default value with zero abstraction overhead. However, full and consistent support of this functionality rarely sees implementation. Arguably, the only example of such an API among those being popular nowadays is SQL: the language has the <code>NULL</code> concept, and default field values functionality, and the support for operations like <code>UPDATE … SET field = DEFAULT</code> (in most dialects). Though working with the protocol is still complicated (for example, in many dialects there is no simple method of getting back those values reset by an <code>UPDATE … DEFAULT</code> query), SQL features working with defaults conveniently enough to use this functionality as is.</p>\n<p>If the protocol does not support resetting to default values as a first-class citizen, the universal rule is to make all new Boolean flags false by default.</p>\n<p><strong>Better</strong></p>\n<pre><code>const orderParams = {\r\n  force_contact_delivery: true\r\n};\r\nconst order = api.createOrder(\r\n  orderParams\r\n);\n</code></pre>\n<p>If a non-Boolean field with specially treated value absence is to be introduced, then introduce two fields.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Creates a user\r\nPOST /v1/users\r\n{ … }\r\n→\r\n// Users are created with a monthly\r\n// spending limit set by default\r\n{\r\n  \"spending_monthly_limit_usd\": \"100\",\r\n  …\r\n}\r\n// To cancel the limit null value is used\r\nPUT /v1/users/{id}\r\n{ \r\n  \"spending_monthly_limit_usd\": null,\r\n  …\r\n}\n</code></pre>\n<p><strong>Better</strong></p>\n<pre><code>POST /v1/users\r\n{\r\n  // true — user explicitly cancels\r\n  //   monthly spending limit\r\n  // false — limit isn't canceled\r\n  //   (default value)\r\n  \"abolish_spending_limit\": false,\r\n  // Non-required field\r\n  // Only present if the previous flag\r\n  // is set to false\r\n  \"spending_monthly_limit_usd\": \"100\",\r\n  …\r\n}\n</code></pre>\n<p><strong>NB</strong>: the contradiction with the previous rule lies in the necessity of introducing ‘negative’ flags (the ‘no limit’ flag), which we had to rename to <code>abolish_spending_limit</code>. Though it's a decent name for a negative flag, its semantics is still unobvious, and developers will have to read the docs. That's the way.</p>\n<h5><a href=\"#chapter-11-paragraph-9\" id=\"chapter-11-paragraph-9\" class=\"anchor\">9. No results is a result</a></h5>\n<p>If a server processed a request correctly and no exceptional situation occurred — there must be no error. Regretfully, an antipattern is widespread — of throwing errors when zero results are found.</p>\n<p><strong>Bad</strong></p>\n<pre><code>POST /v1/coffee-machines/search\r\n{\r\n  \"query\": \"lungo\",\r\n  \"location\": &#x3C;customer's location>\r\n}\r\n→ 404 Not Found\r\n{\r\n  \"localized_message\":\r\n    \"No one makes lungo nearby\"\r\n}\n</code></pre>\n<p><code>4xx</code> statuses imply that a client made a mistake. But no mistakes were made by either a customer or a developer: a client cannot know whether the lungo is served in this location beforehand.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>POST /v1/coffee-machines/search\r\n{\r\n  \"query\": \"lungo\",\r\n  \"location\": &#x3C;customer's location>\r\n}\r\n→ 200 OK\r\n{\r\n  \"results\": []\r\n}\n</code></pre>\n<p>This rule might be reduced to: if an array is the result of the operation, then the emptiness of that array is not a mistake, but a correct response. (Of course, if an empty array is acceptable semantically; an empty array of coordinates is a mistake for sure.)</p>\n<h5><a href=\"#chapter-11-paragraph-10\" id=\"chapter-11-paragraph-10\" class=\"anchor\">10. Errors must be informative</a></h5>\n<p>While writing the code developers face problems, many of them quite trivial, like invalid parameter types or some boundary violations. The more convenient are the error responses your API return, the less is the amount of time developers waste struggling with it, and the more comfortable is working with the API.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>POST /v1/coffee-machines/search\r\n{\r\n  \"recipes\": [\"lngo\"],\r\n  \"position\": {\r\n    \"latitude\": 110,\r\n    \"longitude\": 55\r\n  }\r\n}\r\n→ 400 Bad Request\r\n{}\n</code></pre>\n<p>— of course, the mistakes (typo in the <code>\"lngo\"</code>, wrong coordinates) are obvious. But the handler checks them anyway, so why not return readable descriptions?</p>\n<p><strong>Better</strong>:</p>\n<pre><code>{\r\n  \"reason\": \"wrong_parameter_value\",\r\n  \"localized_message\":\r\n    \"Something is wrong.⮠\r\n     Contact the developer of the app.\"\r\n  \"details\": {\r\n    \"checks_failed\": [\r\n      {\r\n        \"field\": \"recipe\",\r\n        \"error_type\": \"wrong_value\",\r\n        \"message\":\r\n          \"Unknown value: 'lngo'.⮠\r\n           Did you mean 'lungo'?\"\r\n      },\r\n      {\r\n        \"field\": \"position.latitude\",\r\n        \"error_type\": \r\n          \"constraint_violation\",\r\n        \"constraints\": {\r\n          \"min\": -90,\r\n          \"max\": 90\r\n        },\r\n        \"message\":\r\n          \"'position.latitude' value⮠\r\n            must fall within⮠\r\n            the [-90, 90] interval\"\r\n      }\r\n    ]\r\n  }\r\n}\n</code></pre>\n<p>It is also a good practice to return all detectable errors at once to spare developers' time.</p>\n<h5><a href=\"#chapter-11-paragraph-11\" id=\"chapter-11-paragraph-11\" class=\"anchor\">11. Maintain a proper error sequence</a></h5>\n<p><strong>First</strong>, always return unresolvable errors before the resolvable ones:</p>\n<pre><code>POST /v1/orders\r\n{\r\n  \"recipe\": \"lngo\",\r\n  \"offer\"\r\n}\r\n→ 409 Conflict\r\n{\r\n  \"reason\": \"offer_expired\"\r\n}\r\n// Request repeats\r\n// with the renewed offer\r\nPOST /v1/orders\r\n{\r\n  \"recipe\": \"lngo\",\r\n  \"offer\"\r\n}\r\n→ 400 Bad Request\r\n{\r\n  \"reason\": \"recipe_unknown\"\r\n}\n</code></pre>\n<p>— what was the point of renewing the offer if the order cannot be created anyway?</p>\n<p><strong>Second</strong>, maintain such a sequence of unresolvable errors which leads to a minimal amount of customers' and developers' irritation. In particular, this means returning the most significant errors first, solving which requires more effort.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>POST /v1/orders\r\n{\r\n  \"items\": [{\r\n    \"item_id\": \"123\",\r\n    \"price\": \"0.10\"\r\n  }]\r\n}\r\n→\r\n409 Conflict\r\n{\r\n  \"reason\": \"price_changed\",\r\n  \"details\": [{\r\n    \"item_id\": \"123\",\r\n    \"actual_price\": \"0.20\"\r\n  }]\r\n}\r\n// Request repeats\r\n// with an actual price\r\nPOST /v1/orders\r\n{\r\n  \"items\": [{\r\n    \"item_id\": \"123\",\r\n    \"price\": \"0.20\"\r\n  }]\r\n}\r\n→\r\n409 Conflict\r\n{\r\n  \"reason\": \"order_limit_exceeded\",\r\n  \"localized_message\":\r\n    \"Order limit exceeded\"\r\n}\n</code></pre>\n<p>— what was the point of showing the price changed dialog, if the user still can't make an order, even if the price is right? When one of the concurrent orders has finished, and the user is able to commit another one, prices, item availability, and other order parameters will likely need another correction.</p>\n<p><strong>Third</strong>, draw a chart: which error resolution might lead to the emergence of another one. Otherwise, you might eventually return the same error several times, or worse, make a cycle of errors.</p>\n<pre><code>// Create an order\r\n// with a paid delivery\r\nPOST /v1/orders\r\n{\r\n  \"items\": 3,\r\n  \"item_price\": \"3000.00\"\r\n  \"currency_code\": \"MNT\",\r\n  \"delivery_fee\": \"1000.00\",\r\n  \"total\": \"10000.00\"\r\n}\r\n→ 409 Conflict\r\n// Error: if the order sum\r\n// is more than 9000 tögrögs, \r\n// delivery must be free\r\n{\r\n  \"reason\": \"delivery_is_free\"\r\n}\r\n// Create an order\r\n// with a free delivery\r\nPOST /v1/orders\r\n{\r\n  \"items\": 3,\r\n  \"item_price\": \"3000.00\"\r\n  \"currency_code\": \"MNT\",\r\n  \"delivery_fee\": \"0.00\",\r\n  \"total\": \"9000.00\"\r\n}\r\n→ 409 Conflict\r\n// Error: minimal order sum\r\n// is 10000 tögrögs\r\n{\r\n  \"reason\": \"below_minimal_sum\",\r\n  \"currency_code\": \"MNT\",\r\n  \"minimal_sum\": \"10000.00\"\r\n}\n</code></pre>\n<p>You may note that in this setup the error can't be resolved in one step: this situation must be elaborated over, and either order calculation parameters must be changed (discounts should not be counted against the minimal order sum), or a special type of error must be introduced.</p>\n<h4>Developing machine-readable interfaces</h4>\n<p>In pursuit of the API clarity for humans, we frequently forget that it's not developers themselves who interact with the endpoints, but the code they've written. Many concepts that work well with user interfaces, are badly suited for the program ones: specifically, developers can't make decisions based on textual information, and they can't ‘refresh’ the state in case of some confusing situation.</p>\n<h5><a href=\"#chapter-11-paragraph-12\" id=\"chapter-11-paragraph-12\" class=\"anchor\">12. The system state must be observable by clients</a></h5>\n<p>Sometimes, program systems provide interfaces that do not expose to the clients all the data on what is now being executed on the user's\r\nbehalf, specifically — which operations are running and what their statuses are.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Creates an order and returns its id\r\nPOST /v1/orders\r\n{ … }\r\n→\r\n{ \"order_id\" }\n</code></pre>\n<pre><code>// Returns an order by its id\r\nGET /v1/orders/{id}\r\n// The order isn't confirmed\r\n// and awaits checking\r\n→ 404 Not Found\n</code></pre>\n<p>— though the operation looks to be executed successfully, the client must store the order id and recurrently check the <code>GET /v1/orders/{id}</code> state. This pattern is bad per se, but gets even worse when we consider two cases:</p>\n<ul>\n<li>clients might lose the id, if system failure happened in between sending the request and getting the response, or if app data storage was damaged or cleansed;</li>\n<li>customers can't use another device; in fact, the knowledge of orders being created is bound to a specific user agent.</li>\n</ul>\n<p>In both cases, customers might consider order creating failed, and make a duplicate order, with all the consequences to be blamed on you.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>// Creates an order and returns it\r\nPOST /v1/orders\r\n{ &#x3C;order parameters> }\r\n→\r\n{\r\n  \"order_id\",\r\n  // The order is created in explicit\r\n  // «checking» status\r\n  \"status\": \"checking\",\r\n  …\r\n}\n</code></pre>\n<pre><code>// Returns an order by its id\r\nGET /v1/orders/{id}\r\n→\r\n{ \"order_id\", \"status\" … }\n</code></pre>\n<pre><code>// Returns all customer's orders\r\n// in all statuses\r\nGET /v1/users/{id}/orders\n</code></pre>\n<p>This rule is applicable to errors as well, especially client ones. If the error might be corrected, the related data must be machine-readable.</p>\n<p><strong>Bad</strong>: <code>{ \"error\": \"email malformed\" }</code>\r\n— the only thing developers might do with this error is to show the message to the end user.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>{\r\n  // Machine-readable status\r\n  \"status\": \"validation_failed\",\r\n  // An array; if there are several\r\n  // errors, the user might correct\r\n  // them all at once\r\n  \"failed_checks\": [\r\n     {\r\n       \"field: \"email\",\r\n       \"error_type\": \"malformed\",\r\n       // Localized \r\n       // human-readable message\r\n       \"message\": \"email malformed\"\r\n     }\r\n  ]\r\n}\n</code></pre>\n<h5><a href=\"#chapter-11-paragraph-13\" id=\"chapter-11-paragraph-13\" class=\"anchor\">13. Specify lifespans of resources and caching policies</a></h5>\n<p>In modern systems, clients usually have their own state and almost universally cache results of requests — no matter, session-wise or long-term, every entity has some period of autonomous existence. So it's highly desirable to make clarifications; it should be understandable how the data is supposed to be cached, if not from operation signatures, but at least from the documentation.</p>\n<p>Let's stress that we understand ‘cache’ in the extended sense: which variation of operation parameters (not just the request time, but other variables as well) should be considered close enough to some previous request to use the cached result?</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns lungo price in cafes\r\n// closest to the specified location\r\nGET /price?recipe=lungo⮠\r\n  &#x26;longitude={longitude}⮠\r\n  &#x26;latitude={latitude}\r\n→\r\n{ \"currency_code\", \"price\" }\n</code></pre>\n<p>Two questions arise:</p>\n<ul>\n<li>until when the price is valid?</li>\n<li>in what vicinity of the location the price is valid?</li>\n</ul>\n<p><strong>Better</strong>: you may use standard protocol capabilities to denote cache options, like the <code>Cache-Control</code> header. If you need caching in both temporal and spatial dimensions, you should do something like that:</p>\n<pre><code>// Returns an offer: for what money sum\r\n// our service commits to make a lungo\r\nGET /price?recipe=lungo⮠\r\n  &#x26;longitude={longitude}⮠\r\n  &#x26;latitude={latitude}\r\n→\r\n{\r\n  \"offer\": {\r\n    \"id\",\r\n    \"currency_code\",\r\n    \"price\",\r\n    \"conditions\": {\r\n      // Until when the price is valid\r\n      \"valid_until\",\r\n      // What vicinity \r\n      // the price is valid within\r\n      // * city\r\n      // * geographical object\r\n      // * …\r\n      \"valid_within\"\r\n    }\r\n  }\r\n}\n</code></pre>\n<h5><a href=\"#chapter-11-paragraph-14\" id=\"chapter-11-paragraph-14\" class=\"anchor\">14. Pagination, filtration, and cursors</a></h5>\n<p>Any endpoints returning data collections must be paginated. No exclusions exist.</p>\n<p>Any paginated endpoint must provide an interface to iterate over all the data.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns a limited number of records\r\n// sorted by creation date\r\n// starting with a record with an index\r\n// equals to `offset`\r\nGET /v1/records?limit=10&#x26;offset=100\n</code></pre>\n<p>At the first glance, this is the most standard way of organizing the pagination in APIs. But let's ask ourselves some questions.</p>\n<ol>\n<li>How clients could learn about new records being added at the beginning of the list?\r\nObviously, a client could only retry the initial request (<code>offset=0</code>) and compare identifiers to those it already knows. But what if the number of new records exceeds the <code>limit</code>? Imagine the situation:\n<ul>\n<li>the client process records sequentially;</li>\n<li>some problem occurred, and a batch of new records awaits processing;</li>\n<li>the client requests new records (<code>offset=0</code>) but can't find any known records on the first page;</li>\n<li>the client continues iterating over records page by page until it finds the last known identifier; all this time the order processing is idle;</li>\n<li>the client might never start processing, being preoccupied with chaotic page requests to restore records sequence.</li>\n</ul>\n</li>\n<li>What happens if some record is deleted from the head of the list?<br>\nEasy: the client will miss one record and will never learn this.</li>\n<li>What cache parameters to set for this endpoint?<br>\nNone could be set: repeating the request with the same <code>limit</code> and <code>offset</code> parameters each time produces a new record set.</li>\n</ol>\n<p><strong>Better</strong>: in such unidirectional lists the pagination must use the key that implies the order. Like this:</p>\n<pre><code>// Returns a limited number of records\r\n// sorted by creation date\r\n// starting with a record with an identifier\r\n// following the specified one\r\nGET /v1/records⮠\r\n  ?older_than={record_id}&#x26;limit=10\r\n// Returns a limited number of records\r\n// sorted by creation date\r\n// starting with a record with an identifier\r\n// preceding the specified one\r\nGET /v1/records⮠\r\n  ?newer_than={record_id}&#x26;limit=10\n</code></pre>\n<p>With the pagination organized like that, clients never bother about records being added or removed in the processed part of the list: they continue to iterate over the records, either getting new ones (using <code>newer_than</code>) or older ones (using <code>older_than</code>). If there is no record removal operation, clients may easily cache responses — the URL will always return the same record set.</p>\n<p>Another way to organize such lists is by returning a <code>cursor</code> to be used instead of the <code>record_id</code>, making interfaces more versatile.</p>\n<pre><code>// Initial data request\r\nPOST /v1/records/list\r\n{\r\n  // Some additional filtering options\r\n  \"filter\": {\r\n    \"category\": \"some_category\",\r\n    \"created_date\": {\r\n      \"older_than\": \"2020-12-07\"\r\n    }\r\n  }\r\n}\r\n→\r\n{ \"cursor\" }\n</code></pre>\n<pre><code>// Follow-up requests\r\nGET /v1/records?cursor=&#x3C;cursor value>\r\n{ \"records\", \"cursor\" }\n</code></pre>\n<p>One advantage of this approach is the possibility to keep initial request parameters (i.e. the <code>filter</code> in our example) embedded into the cursor itself, thus not copying them in follow-up requests. It might be especially actual if the initial request prepares the full dataset, for example, moving it from the ‘cold’ storage to a ‘hot’ one (then the <code>cursor</code> might simply contain the encoded dataset id and the offset).</p>\n<p>There are several approaches to implementing cursors (for example, making a single endpoint for initial and follow-up requests and returning the first data portion in the first response). As usual, the crucial part is maintaining consistency across all such endpoints.</p>\n<p><strong>NB</strong>: some sources discourage this approach because in this case user can't see a list of all pages and can't choose an arbitrary one. We should note here that:</p>\n<ul>\n<li>such a case (pages list and page selection) exists if we deal with user interfaces; we could hardly imagine a <em>program</em> interface that needs to provide access to random data pages;</li>\n<li>if we still talk about an API to some application, which has a ‘paging’ user control, then a proper approach would be to prepare ‘paging’ data on the server side, including generating links to pages;</li>\n<li>cursor-based solutions don't prohibit using the <code>offset</code>/<code>limit</code> parameters; nothing could prevent us from creating a dual interface, which might serve both <code>GET /items?cursor=…</code> and <code>GET /items?offset=…&#x26;limit=…</code> requests;</li>\n<li>finally, if there is a necessity to provide access to arbitrary pages in the user interface, we should ask ourselves a question, which problem is being solved that way; probably, users use this functionality to find something: a specific element on the list, or the position they ended while working with the list last time; probably, we should provide more convenient controls to solve those tasks than accessing data pages by their indexes.</li>\n</ul>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns a limited number of records\r\n// sorted by a specified field \r\n// in a specified order\r\n// starting with a record with an index\r\n// equals to `offset`\r\nGET /records?sort_by=date_modified⮠\r\n  &#x26;sort_order=desc&#x26;limit=10&#x26;offset=100\n</code></pre>\n<p>Sorting by the date of modification usually means that data might be modified. In other words, some records might change after the first data chunk is returned, but before the next chunk is requested. Modified records will simply disappear from the listing because of moving to the first page. Clients will never get those records that were changed during the iteration process, even if the cursor-based scheme is implemented, and they never learn the sheer fact of such an omission. Also, this particular interface isn't extendable as there is no way to add sorting by two or more fields.</p>\n<p><strong>Better</strong>: there is no general solution to this problem in this formulation. Listing records by modification time will always be unpredictably volatile, so we have to change the approach itself; we have two options.</p>\n<p><strong>Option one</strong>: fix the records ordering at the moment we've got the initial request, e.g. our server produces the entire list and stores it in the immutable form:</p>\n<pre><code>// Creates a view based on the parameters passed\r\nPOST /v1/record-views\r\n{\r\n  sort_by: [{ \r\n    \"field\": \"date_modified\", \r\n    \"order\": \"desc\" \r\n  }]\r\n}\r\n→\r\n{ \"id\", \"cursor\" }\n</code></pre>\n<pre><code>// Returns a portion of the view\r\nGET /v1/record-views/{id}⮠\r\n  ?cursor={cursor}\n</code></pre>\n<p>Since the produced view is immutable, access to it might be organized in any form, including a limit-offset scheme, cursors, <code>Range</code> header, etc. However, there is a downside: records modified after the view was generated will be misplaced or outdated.</p>\n<p><strong>Option two</strong>: guarantee a strict records order, for example, by introducing a concept of record change events:</p>\n<pre><code>// `cursor` is optional\r\nGET /v1/records/modified/list⮠\r\n  ?[cursor={cursor}]\r\n→\r\n{\r\n  \"modified\": [\r\n    { \"date\", \"record_id\" }\r\n  ],\r\n  \"cursor\"\r\n}\n</code></pre>\n<p>This scheme's downsides are the necessity to create separate indexed event storage, and the multiplication of data items, since for a single record many events might exist.</p>\n<h4>Ensuring technical quality of APIs</h4>\n<p>Fine APIs must not only solve developers' and end users' problems but also ensure the quality of the solution, e.g. do not contain logical and technical mistakes (and do not provoke developers to make them), save computational resources, and in general implement the best practices applicable to the subject area.</p>\n<h5><a href=\"#chapter-11-paragraph-15\" id=\"chapter-11-paragraph-15\" class=\"anchor\">15. Keep the precision of fractional numbers intact</a></h5>\n<p>If the protocol allows, fractional numbers with fixed precision (like money sums) must be represented as a specially designed type like Decimal or its equivalent.</p>\n<p>If there is no Decimal type in the protocol (for instance, JSON doesn't have one), you should either use integers (e.g. apply a fixed multiplicator) or strings.</p>\n<p>If conversion to a float number will certainly lead to losing the precision (let's say if we translate ‘20 minutes’ into hours as a decimal fraction), it's better to either stick to a fully precise format (e.g. opt for <code>00:20</code> instead of <code>0.33333…</code>) or to provide an SDK to work with this data, or as a last resort describe the rounding principles in the documentation.</p>\n<h5><a href=\"#chapter-11-paragraph-16\" id=\"chapter-11-paragraph-16\" class=\"anchor\">16. All API operations must be idempotent</a></h5>\n<p>Let us remind the reader that idempotency is the following property: repeated calls to the same function with the same parameters won't change the resource state. Since we're discussing client-server interaction in the first place, repeating requests in case of network failure isn't an exception, but a norm of life.</p>\n<p>If the endpoint's idempotency can't be assured naturally, explicit idempotency parameters must be added, in a form of either a token or a resource version.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Creates an order\r\nPOST /orders\n</code></pre>\n<p>A second order will be produced if the request is repeated!</p>\n<p><strong>Better</strong>:</p>\n<pre><code>// Creates an order\r\nPOST /v1/orders\r\nX-Idempotency-Token: &#x3C;random string>\n</code></pre>\n<p>A client on its side must retain the <code>X-Idempotency-Token</code> in case of automated endpoint retrying. A server on its side must check whether an order created with this token exists.</p>\n<p><strong>An alternative</strong>:</p>\n<pre><code>// Creates order draft\r\nPOST /v1/orders/drafts\r\n→\r\n{ \"draft_id\" }\n</code></pre>\n<pre><code>// Confirms the draft\r\nPUT /v1/orders/drafts⮠\r\n  /{draft_id}/confirmation\r\n{ \"confirmed\": true }\n</code></pre>\n<p>Creating order drafts is a non-binding operation since it doesn't entail any consequences, so it's fine to create drafts without the idempotency token.</p>\n<p>Confirming drafts is a naturally idempotent operation, with the <code>draft_id</code> being its idempotency key.</p>\n<p>Also worth mentioning that adding idempotency tokens to naturally idempotent handlers isn't meaningless either, since it allows to distinguish two situations:</p>\n<ul>\n<li>a client didn't get the response because of some network issues, and is now repeating the request;</li>\n<li>a client made a mistake by posting conflicting requests.</li>\n</ul>\n<p>Consider the following example: imagine there is a shared resource, characterized by a revision number, and a client tries updating it.</p>\n<pre><code>POST /resource/updates\r\n{\r\n  \"resource_revision\": 123\r\n  \"updates\"\r\n}\n</code></pre>\n<p>The server retrieves the actual resource revision and finds it to be 124. How to respond correctly? <code>409 Conflict</code> might be returned, but then the client will be forced to understand the nature of the conflict and somehow resolve it, potentially confusing the user. It's also unwise to fragment the conflict-resolving algorithm, allowing each client to implement it independently.</p>\n<p>The server may compare request bodies, assuming that identical <code>updates</code> values mean retrying, but this assumption might be dangerously wrong (for example if the resource is a counter of some kind, then repeating identical requests are routine).</p>\n<p>Adding the idempotency token (either directly as a random string, or indirectly in a form of drafts) solves this problem.</p>\n<pre><code>POST /resource/updates\r\nX-Idempotency-Token: &#x3C;token>\r\n{\r\n  \"resource_revision\": 123\r\n  \"updates\"\r\n}\r\n→ 201 Created\n</code></pre>\n<p>— the server found out that the same token was used in creating revision 124, which means the client is retrying the request.</p>\n<p>Or:</p>\n<pre><code>POST /resource/updates\r\nX-Idempotency-Token: &#x3C;token>\r\n{\r\n  \"resource_revision\": 123\r\n  \"updates\"\r\n}\r\n→ 409 Conflict\n</code></pre>\n<p>— the server found out that a different token was used in creating revision 124, which means an access conflict.</p>\n<p>Furthermore, adding idempotency tokens not only resolves the issue but also makes advanced optimizations possible. If the server detects an access conflict, it could try to resolve it, ‘rebasing’ the update like modern version control systems do, and return a <code>200 OK</code> instead of a <code>409 Conflict</code>. This logic dramatically improves user experience, being fully backwards compatible, and helps to avoid conflict-resolving code fragmentation.</p>\n<p>Also, be warned: clients are bad at implementing idempotency tokens. Two problems are common:</p>\n<ul>\n<li>you can't really expect that clients generate truly random tokens — they may share the same seed or simply use weak algorithms or entropy sources; therefore you must put constraints on token checking: token must be unique to a specific user and resource, not globally;</li>\n<li>clients tend to misunderstand the concept and either generate new tokens each time they repeat the request (which deteriorates the UX, but otherwise healthy) or conversely use one token in several requests (not healthy at all and could lead to catastrophic disasters; another reason to implement the suggestion in the previous clause); writing detailed doc and/or client library is highly recommended.</li>\n</ul>\n<h5><a href=\"#chapter-11-paragraph-17\" id=\"chapter-11-paragraph-17\" class=\"anchor\">17. Avoid non-atomic operations</a></h5>\n<p>There is a common problem with implementing the changes list approach: what to do if some changes were successfully applied, while others are not? The rule is simple: if you may ensure the atomicity (e.g. either apply all changes or none of them) — do it.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Returns a list of recipes\r\napi.getRecipes();\r\n→\r\n{\r\n  \"recipes\": [{\r\n    \"id\": \"lungo\",\r\n    \"volume\": \"200ml\"\r\n  }, {\r\n    \"id\": \"latte\",\r\n    \"volume\": \"300ml\"\r\n  }]\r\n}\r\n// Changes recipes' parameters\r\napi.updateRecipes({\r\n  \"changes\": [{\r\n    \"id\": \"lungo\",\r\n    \"volume\": \"300ml\"\r\n  }, {\r\n    \"id\": \"latte\",\r\n    \"volume\": \"-1ml\"\r\n  }]\r\n});\r\n→ Bad Request\r\n// Re-reading the list\r\napi.getRecipes();\r\n→\r\n{\r\n  \"recipes\": [{\r\n    \"id\": \"lungo\",\r\n    // This value changed\r\n    \"volume\": \"300ml\"\r\n  }, {\r\n    \"id\": \"latte\",\r\n    // and this did not\r\n    \"volume\": \"300ml\"\r\n  }]\r\n}\n</code></pre>\n<p>— there is no way how the client might learn that failed operation was actually partially applied. Even if there is an indication of this fact in the response, the client still cannot tell, whether the lungo volume changed because of the request, or if some other client changed it.</p>\n<p>If you can't guarantee the atomicity of an operation, you should elaborate in detail on how to deal with it. There must be a separate status for each individual change.</p>\n<p><strong>Better</strong>:</p>\n<pre><code>api.updateRecipes({\r\n  \"changes\": [{\r\n    \"recipe_id\": \"lungo\",\r\n    \"volume\": \"300ml\"\r\n  }, {\r\n    \"recipe_id\": \"latte\",\r\n    \"volume\": \"-1ml\"\r\n  }]\r\n});\r\n// You may actually return\r\n// a ‘partial success’ status\r\n// if the protocol allows it\r\n→\r\n{\r\n  \"changes\": [{\r\n    \"change_id\",\r\n    \"occurred_at\",\r\n    \"recipe_id\": \"lungo\",\r\n    \"status\": \"success\"\r\n  }, {\r\n    \"change_id\",\r\n    \"occurred_at\",\r\n    \"recipe_id\": \"latte\",\r\n    \"status\": \"fail\",\r\n    \"error\"\r\n  }]\r\n}\n</code></pre>\n<p>Here:</p>\n<ul>\n<li>the <code>change_id</code> field is a unique identifier of each atomic change;</li>\n<li>the <code>occurred_at</code> field is a moment of time when the change was actually applied;</li>\n<li>the <code>error</code> field contains the error data related to the specific change.</li>\n</ul>\n<p>Might be of use:</p>\n<ul>\n<li>introducing <code>sequence_id</code> parameters in the request to guarantee execution order and to align item order in response with the requested one;</li>\n<li>expose a separate <code>/changes-history</code> endpoint for clients to get the history of applied changes even if the app crashed while getting a partial success response or there was a network timeout.</li>\n</ul>\n<p>Non-atomic changes are undesirable because they erode the idempotency concept. Let's take a look at the example:</p>\n<pre><code>api.updateRecipes({\r\n  \"idempotency_token\",\r\n  \"changes\": [{\r\n    \"recipe_id\": \"lungo\",\r\n    \"volume\": \"300ml\"\r\n  }, {\r\n    \"recipe_id\": \"latte\",\r\n    \"volume\": \"400ml\"\r\n  }]\r\n});\r\n→\r\n{\r\n  \"changes\": [{\r\n    …\r\n    \"status\": \"success\"\r\n  }, {\r\n    …\r\n    \"status\": \"fail\",\r\n    \"error\": {\r\n      \"reason\": \r\n        \"too_many_requests\"\r\n    }\r\n  }]\r\n}\n</code></pre>\n<p>Imagine the client failed to get a response because of a network error, and it repeats the request:</p>\n<pre><code>api.updateRecipes({\r\n  \"idempotency_token\",\r\n  \"changes\": [{\r\n    \"recipe_id\": \"lungo\",\r\n    \"volume\": \"300ml\"\r\n  }, {\r\n    \"recipe_id\": \"latte\",\r\n    \"volume\": \"400ml\"\r\n  }]\r\n});\r\n→\r\n{\r\n  \"changes\": [{\r\n    …\r\n    \"status\": \"success\"\r\n  }, {\r\n    …\r\n    \"status\": \"success\",\r\n  }]\r\n}\n</code></pre>\n<p>To the client, everything looks normal: changes were applied, and the last response got is always actual. But the resource state after the first request was inherently different from the resource state after the second one, which contradicts the very definition of ‘idempotency’.</p>\n<p>It would be more correct if the server did nothing upon getting the second request with the same idempotency token, and returned the same status list breakdown. But it implies that storing these breakdowns must be implemented.</p>\n<p>Just in case: nested operations must be idempotent themselves. If they are not, separate idempotency tokens must be generated for each nested operation.</p>\n<h5><a href=\"#chapter-11-paragraph-18\" id=\"chapter-11-paragraph-18\" class=\"anchor\">18. Don't invent security</a></h5>\n<p>If the author of this book was given a dollar each time he had to implement the additional security protocol invented by someone, he would already retire. The API developers' passion for signing request parameters or introducing complex schemes of exchanging passwords for tokens is as obvious as meaningless.</p>\n<p><strong>First</strong>, almost all security-enhancing procedures for every kind of operation <em>are already invented</em>. There is no need to re-think them anew; just take the existing approach and implement it. No self-invented algorithm for request signature checking provides the same level of preventing <a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-Middle attack</a> as a TLS connection with mutual certificate pinning.</p>\n<p><strong>Second</strong>, it's quite presumptuous (and dangerous) to assume you're an expert in security. New attack vectors come every day, and being aware of all the actual threats is a full-day job. If you do something different during workdays, the security system designed by you will contain vulnerabilities that you have never heard about — for example, your password-checking algorithm might be susceptible to the <a href=\"https://en.wikipedia.org/wiki/Timing_attack\">timing attack</a>, and your web-server, to the <a href=\"https://capec.mitre.org/data/definitions/105.html\">request splitting attack</a>.</p>\n<h5><a href=\"#chapter-11-paragraph-19\" id=\"chapter-11-paragraph-19\" class=\"anchor\">19. Explicitly declare technical restrictions</a></h5>\n<p>Every field in your API comes with restrictions: the maximum allowed text length, the size of attached documents, the allowed ranges for numeric values, etc. Often, describing those limits is neglected by API developers — either because they consider it obvious, or because they simply don't know the boundaries themselves. This is of course an antipattern: not knowing what are the limits automatically implies that partners' code might stop working at any moment because of the reasons they don't control.</p>\n<p>Therefore, first, declare the boundaries for every field in the API without any exceptions, and, second, generate proper machine-readable errors describing which exact boundary was violated should such a violation occur.</p>\n<p>The same reasoning applies to quotas as well: partners must have access to the statistics on which part of the quota they have already used, and the errors in the case of exceeding quotas must be informative.</p>\n<h5><a href=\"#chapter-11-paragraph-20\" id=\"chapter-11-paragraph-20\" class=\"anchor\">20. Count the amount of traffic</a></h5>\n<p>Nowadays the amount of traffic is rarely taken into account — the Internet connection is considered unlimited almost universally. However, it's still not entirely unlimited: with some degree of carelessness, it's always possible to design a system generating the amount of traffic that is uncomfortable even for modern networks.</p>\n<p>There are three obvious reasons for inflating network traffic:</p>\n<ul>\n<li>no data pagination provided;</li>\n<li>no limits on the data fields set, or too large binary data (graphics, audio, video, etc.) is being transmitted;</li>\n<li>clients query for the data too frequently or cache them too little.</li>\n</ul>\n<p>If the first two problems are solved by applying pure technical measures (see the corresponding paragraphs), the third one is more of a logical kind: how to organize the client updates stream to find a balance between the responsiveness of the system and the resources spent to ensure it. Here are several recommendations:</p>\n<ul>\n<li>\n<p>do not rely too heavily on asynchronous interfaces;</p>\n<ul>\n<li>on one side, they allow tackling many technical problems related to the API performance, which, in turn, allows for maintaining backwards compatibility: if some method is asynchronous from the very beginning, the latencies and the data consistency models might be easily tuned if needed;</li>\n<li>from the other side, the number of requests clients generate becomes hardly predicable, as a client in order to retrieve a result needs to make some unpredictable number of attempts;</li>\n</ul>\n</li>\n<li>\n<p>declare an explicit retry policy (for example, with the <code>Retry-After</code> header);</p>\n<ul>\n<li>yes, some partners will ignore it as developers will get too lazy to implement it, but some will not (especially if you provide the SDKs as well);</li>\n</ul>\n</li>\n<li>\n<p>if you expect a significant number of asynchronous operations in the API, allow developers to choose between the poll model (clients make repeated requests to an endpoint to check the asynchronous procedure status) and the push model (the server notifies clients of status changes, for example, via webhooks or server-push mechanics);</p>\n</li>\n<li>\n<p>if some entity comprises both ‘lightweight’ data (let's say, the name and the description of the recipe) and ‘heavy’ data (let's say, the promo picture of the beverage which might easily be a hundred times larger than the text fields), it's better to split endpoints and pass only a reference to the ‘heavy’ data (a link to the image, in our case) — this will allow at least setting different cache policies for different kinds of data.</p>\n</li>\n</ul>\n<p>As a useful exercise, try modeling the typical lifecycle of a partner's app's main functionality (for example, making a single order) to count the number of requests and the amount of traffic that it takes.</p>\n<h5><a href=\"#chapter-11-paragraph-21\" id=\"chapter-11-paragraph-21\" class=\"anchor\">21. Avoid implicit partial updates</a></h5>\n<p>One of the most common API design antipatterns is an attempt to spare something on detailed state change descriptions.</p>\n<p><strong>Bad</strong>:</p>\n<pre><code>// Creates an order comprising\r\n// two items\r\nPOST /v1/orders/\r\n{\r\n  \"delivery_address\",\r\n  \"items\": [{\r\n    \"recipe\": \"lungo\",\r\n  }, {\r\n    \"recipe\": \"latte\",\r\n    \"milk_type\": \"oats\"\r\n  }]\r\n}\r\n→\r\n{ \"order_id\" }\n</code></pre>\n<pre><code>// Partially rewrites the order,\r\n// updates the volume\r\n// of the second item\r\nPATCH /v1/orders/{id}\r\n{\r\n  \"items\": [null, {\r\n    \"volume\": \"800ml\"\r\n  }]\r\n}\r\n→\r\n{ /* updates accepted */ }\n</code></pre>\n<p>This signature is bad per se as it's unreadable. What does <code>null</code> as the first array element mean — is it a deletion of an element or an indication that no actions are needed towards it? What happens with the fields that are not stated in the update operation body (<code>delivery_address</code>, <code>milk_type</code>) — will they be reset to defaults, or stay unchanged?</p>\n<p>The nastiest part is that whatever option you choose, the number of problems will only multiply further. Let's say we agreed that the <code>{\"items\":[null, {…}]}</code> statement means that the first element of the array is left untouched, e.g. no changes are needed. Then, how shall we encode its deletion? Invent one more ‘magical’ value meaning ‘remove it’? Similarly, if the fields that are not explicitly mentioned retain their value — how to reset them to defaults?</p>\n<p><strong>The simple solution</strong> is always rewriting the data entirely, e.g. to require passing the entire object, to replace the current state with it, and to return the full state as a result of the operation. This obvious solution is frequently rejected with the following reasoning:</p>\n<ul>\n<li>increased requests sizes and therefore, the amount of traffic;</li>\n<li>the necessity to detect which fields are changed (for instance, to generate proper state change events for subscribers);</li>\n<li>the inability of organizing cooperative editing when two clients are editing different object properties simultaneously.</li>\n</ul>\n<p>However, if we take a deeper look, all these disadvantages are actually imaginative:</p>\n<ul>\n<li>the reasons for increasing the amount of traffic were described in the previous paragraphs, and serving extra fields is not one of them (and if it is, it's rather a rationale to decompose the endpoint);</li>\n<li>the concept of sending only those fields that changed is in fact about shifting the responsibility of change detection to clients;\n<ul>\n<li>it doesn't make the task any easier, and also introduces the problem of client code fragmentation as several independent implementations of the change detection algorithm will occur;</li>\n<li>furthermore, the existence of the client algorithm for finding the fields that changed doesn't mean that the server might skip implementing it as client developers might make mistakes or simply spare the effort and always send all the fields;</li>\n</ul>\n</li>\n<li>finally, this naïve approach to organizing collaborative editing works only with transitive changes (e.g. if the final result does not depend on the order in which the operations were executed), and in our case, it's already not true: deletion of the first element and editing the second element are non-transitive;\n<ul>\n<li>often, in addition to sparing traffic on requests, the same concept is applied to responses as well, e.g. no data is returned for modifying operations; thus two clients making simultaneous edits do not see one another's changes.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Better</strong>: split the functionality. This also correlates well with the <a href=\"#chapter-10\">decomposition principle</a> we've discussed in the previous chapter.</p>\n<pre><code>// Creates an order comprising\r\n// two items\r\nPOST /v1/orders/\r\n{\r\n  \"parameters\": {\r\n    \"delivery_address\"\r\n  }\r\n  \"items\": [{\r\n    \"recipe\": \"lungo\",\r\n  }, {\r\n    \"recipe\": \"latte\",\r\n    \"milk_type\": \"oats\"\r\n  }]\r\n}\r\n→\r\n{\r\n  \"order_id\", \r\n  \"created_at\",\r\n  \"parameters\": {\r\n    \"delivery_address\"\r\n  }\r\n  \"items\": [\r\n    { \"item_id\", \"status\"}, \r\n    { \"item_id\", \"status\"}\r\n  ]\r\n}\n</code></pre>\n<pre><code>// Changes the order parameters\r\n// that affect all items\r\nPUT /v1/orders/{id}/parameters\r\n{ \"delivery_address\" }\r\n→\r\n{ \"delivery_address\" }\n</code></pre>\n<pre><code>// Partially updates one item,\r\n// sets the volume of one of\r\n// the beverages\r\nPUT /v1/orders/{id}/items/{item_id}\r\n{ \r\n  // All the fields are passed,\r\n  // even if only one has changed\r\n  \"recipe\", \"volume\", \"milk_type\"\r\n}\r\n→\r\n{ \"recipe\", \"volume\", \"milk_type\" }\n</code></pre>\n<pre><code>// Deletes one order item\r\nDELETE /v1/orders/{id}/items/{item_id}\n</code></pre>\n<p>Now to reset <code>volume</code> to its default value it's enough to omit it in the <code>PUT /items/{item_id}</code> request body. Also, the operations of deleting one item while simultaneously modifying another one are now transitive.</p>\n<p>This approach also allows for separating non-mutable and calculated fields (in our case, <code>created_at</code> and <code>status</code>) from editable ones without creating ambiguous situations (what should happen if a client tries to change the <code>created_at</code> field?)</p>\n<p>It is also possible to return full order objects from <code>PUT</code> endpoints instead of just the sub-resource that was overwritten (though it requires some naming convention).</p>\n<p><strong>NB</strong>: while decomposing endpoints, the idea of splitting them into mutable and non-mutable data often looks tempting. It makes possible to mark the latter as infinitely cacheable and never bother about pagination ordering and update format consistency. The plan looks solid on paper, but with the API expansion, it frequently happens that immutable fields eventually cease being immutable, and the entire concept not only stops working properly but even starts looking like a design flaw. We would rather recommend designating data as immutable in one of the two cases: (1) making them editable will really mean breaking backwards compatibility, or (2) the link to the resource (for example, an image) is served via the API as well, and you do possess the capability of making those links persistent (e.g. you might generate a new link to the image instead of rewriting the contents of the old one).</p>\n<p><strong>Even better</strong>: design a format for atomic changes.</p>\n<pre><code>POST /v1/order/changes\r\nX-Idempotency-Token: &#x3C;idempotency token>\r\n{\r\n  \"changes\": [{\r\n    \"type\": \"set\",\r\n    \"field\": \"delivery_address\",\r\n    \"value\": &#x3C;new value>\r\n  }, {\r\n    \"type\": \"unset_item_field\",\r\n    \"item_id\",\r\n    \"field\": \"volume\"\r\n  }],\r\n  …\r\n}\n</code></pre>\n<p>This approach is much harder to implement, but it's the only viable method to implement collaborative editing since it explicitly reflects what a user was actually doing with entity representation. With data exposed in such a format, you might actually implement offline editing, when user changes are accumulated and then sent at once, while the server automatically resolves conflicts by ‘rebasing’ the changes.</p>\n<h4>Ensuring API product quality</h4>\n<p>Apart from the technological limitations, any real API will soon face the imperfection of the surrounding reality. Of course, any one of us would prefer living in the world of pink unicorns, free of piles of legacy code, evil-doers, national conflicts, and competitors' scheming. Fortunately or not, we live in the real world, and API vendors have to mind all those while developing the API.</p>\n<h5><a href=\"#chapter-11-paragraph-22\" id=\"chapter-11-paragraph-22\" class=\"anchor\">22. Use globally unique identifiers</a></h5>\n<p>It's considered a good form to use globally unique strings as entity identifiers, either semantic (i.e. \"lungo\" for beverage types) or random ones (i.e. <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\">UUID-4</a>). It might turn out to be extremely useful if you need to merge data from several sources under a single identifier.</p>\n<p>In general, we tend to advise using urn-like identifiers, e.g. <code>urn:order:&#x3C;uuid></code> (or just <code>order:&#x3C;uuid></code>). That helps a lot in dealing with legacy systems with different identifiers attached to the same entity. Namespaces in urns help to understand quickly which identifier is used and if there is a usage mistake.</p>\n<p>One important implication: <strong>never use increasing numbers as external identifiers</strong>. Apart from the abovementioned reasons, it allows counting how many entities of each type there are in the system. Your competitors will be able to calculate a precise number of orders you have each day, for example.</p>\n<p><strong>NB</strong>: in this book, we often use short identifiers like \"123\" in code examples; that's for the convenience of reading the book on small screens. Do not replicate this practice in a real-world API.</p>\n<h5><a href=\"#chapter-11-paragraph-23\" id=\"chapter-11-paragraph-23\" class=\"anchor\">23. Stipulate future restrictions</a></h5>\n<p>With the API popularity growth, it will inevitably become necessary to introduce technical means of preventing illicit API usage, such as displaying captchas, setting honeypots, raising the ‘too many requests’ exceptions, installing anti-DDoS proxies, etc. All these things cannot be done if the corresponding errors and messages were not described in the docs from the very beginning.</p>\n<p>You are not obliged to actually generate those exceptions, but you might stipulate this possibility in the terms of service. For example, you might describe the <code>429 Too Many Requests</code> error or captcha redirect, but implement the functionality when it's actually needed.</p>\n<p>It is extremely important to leave room for multi-factored authentication (such as TOTP, SMS, or 3D-secure-like technologies) if it's possible to make payments through the API. In this case, it's a must-have from the very beginning.</p>\n<h5><a href=\"#chapter-11-paragraph-24\" id=\"chapter-11-paragraph-24\" class=\"anchor\">24. Don't provide endpoints for mass downloading of sensitive data</a></h5>\n<p>If it's possible to get through the API users' personal data, bank card numbers, private messages, or any other kind of information, exposing of which might seriously harm users, partners, and/or you — there must be <em>no</em> methods of bulk getting the data, or at least there must be rate limiters, page size restrictions, and, ideally, multi-factored authentication in front of them.</p>\n<p>Often, making such offloads on an ad-hoc basis, e.g. bypassing the API, is a reasonable practice.</p>\n<h5><a href=\"#chapter-11-paragraph-25\" id=\"chapter-11-paragraph-25\" class=\"anchor\">25. Localization and internationalization</a></h5>\n<p>All endpoints must accept language parameters (for example, in a form of the <code>Accept-Language</code> header), even if they are not being used currently.</p>\n<p>It is important to understand that the user's language and the user's jurisdiction are different things. Your API working cycle must always store the user's location. It might be stated either explicitly (requests contain geographical coordinates) or implicitly (initial location-bound request initiates session creation which stores the location), but no correct localization is possible in absence of location data. In most cases reducing the location to just a country code is enough.</p>\n<p>The thing is that lots of parameters potentially affecting data formats depend not on language, but on a user's location. To name a few: number formatting (integer and fractional part delimiter, digit groups delimiter), date formatting, the first day of the week, keyboard layout, measurement units system (which might be non-decimal!), etc. In some situations, you need to store two locations: user residence location and user ‘viewport’. For example, if a US citizen is planning a European trip, it's convenient to show prices in local currency, but measure distances in miles and feet.</p>\n<p>Sometimes explicit location passing is not enough since there are lots of territorial conflicts in the world. How the API should behave when user coordinates lie within disputed regions is a legal matter, regretfully. The author of this book once had to implement a ‘state A territory according to state B official position’ concept.</p>\n<p><strong>Important</strong>: mark a difference between localization for end users and localization for developers. Take a look at the example in rule #12: the <code>localized_message</code> is meant for the user; the app should show it if there is no specific handler for this error exists in the code. This message must be written in the user's language and formatted according to the user's location. But the <code>details.checks_failed[].message</code> is meant to be read by developers examining the problem. So it must be written and formatted in a manner that suits developers best. In the software development world, it usually means ‘in English’.</p>\n<p>Worth mentioning is that the <code>localized_</code> prefix in the example is used to differentiate messages to users from messages to developers. A concept like that must be, of course, explicitly stated in your API docs.</p>\n<p>And one more thing: all strings must be UTF-8, no exclusions.</p>"}